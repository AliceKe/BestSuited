version: '3.10'
services:
    frontend_app:
        container_name: ${TEAM_NAME}_frontend_app
        ports:
                - 0.0.0.0:${FRONTEND_EXTERNAL_PORT}:${FRONTEND_INTERNAL_PORT}
        expose:
                - ${FRONTEND_INTERNAL_PORT} 
        restart: always
        build:
                context: ./frontend/
                dockerfile: Dockerfile
        networks:
                flask_network:
                        aliases:
                                - flask-network
        command: npm start
    backend_flask_app:
        container_name: ${TEAM_NAME}_backend_app
        ports:
                - 0.0.0.0:${FLASK_EXTERNAL_PORT}:${FLASK_INTERNAL_PORT}
        restart: always
        build:
                context: ./backend
                dockerfile: Dockerfile
                args:
                        DB_NAME: ${TEAM_NAME}
        depends_on:
                - db
        environment:
                - FLASK_APP=app.py
                - FLASK_RUN_HOST=0.0.0.0
                - FLASK_DEBUG=0
        networks:
                flask_network:
                        aliases:
                                - flask-network
        command: gunicorn --bind 0.0.0.0:5000 --workers 4 "app:app"
    db:
        container_name: ${TEAM_NAME}_db
        image: mysql:latest
        restart: always
        environment:
                MYSQL_USER: admin
                MYSQL_PASSWORD: admin
                MYSQL_DATABASE: kardashiandb
                MYSQL_ROOT_PASSWORD: admin
        volumes:
                - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        networks:
                - flask_network
volumes:
        flask_volume:
networks:
        flask_network: